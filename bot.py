# main.py
# This is the main file for the Discord Translator Bot.
# It uses discord.py for bot interaction and googletrans for translation.
# Includes a Flask web server to keep the bot alive on hosting platforms like Render.
#
# Setup:
# 1. Make sure you have a .env file in the same directory.
# 2. The .env file should contain one line: BOT_TOKEN="YOUR_DISCORD_BOT_TOKEN"
# 3. Run the bot using `python bot.py`

import json
import discord
import os
import asyncio
from dotenv import load_dotenv
from googletrans import Translator, LANGUAGES
from flask import Flask
from threading import Thread

# --- Configuration ---

# Load environment variables from the .env file
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# A dictionary to map flag emojis to language codes
FLAG_TO_LANG = {
    'ğŸ‡¦ğŸ‡«': 'ps', 'ğŸ‡¦ğŸ‡±': 'sq', 'ğŸ‡©ğŸ‡¿': 'ar', 'ğŸ‡¦ğŸ‡¸': 'en', 'ğŸ‡¦ï¿½': 'ca', 'ğŸ‡¦ğŸ‡´': 'pt', 'ğŸ‡¦ğŸ‡®': 'en',
    'ğŸ‡¦ğŸ‡¬': 'en', 'ğŸ‡¦ğŸ‡·': 'es', 'ğŸ‡¦ğŸ‡²': 'hy', 'ğŸ‡¦ğŸ‡¼': 'nl', 'ğŸ‡¦ğŸ‡º': 'en', 'ğŸ‡¦ğŸ‡¹': 'de', 'ğŸ‡¦ğŸ‡¿': 'az',
    'ğŸ‡§ğŸ‡¸': 'en', 'ğŸ‡§ğŸ‡­': 'ar', 'ğŸ‡§ğŸ‡©': 'bn', 'ğŸ‡§ğŸ‡§': 'en', 'ğŸ‡§ğŸ‡¾': 'be', 'ğŸ‡§ğŸ‡ª': 'nl', 'ğŸ‡§ğŸ‡¿': 'en',
    'ğŸ‡§ğŸ‡¯': 'fr', 'ğŸ‡§ğŸ‡²': 'en', 'ğŸ‡§ğŸ‡¹': 'dz', 'ğŸ‡§ğŸ‡´': 'es', 'ğŸ‡§ğŸ‡¦': 'bs', 'ğŸ‡§ğŸ‡¼': 'en', 'ğŸ‡§ğŸ‡·': 'pt',
    'ğŸ‡®ğŸ‡´': 'en', 'ğŸ‡»ğŸ‡¬': 'en', 'ğŸ‡§ğŸ‡³': 'ms', 'ğŸ‡§ğŸ‡¬': 'bg', 'ğŸ‡§ğŸ‡«': 'fr', 'ğŸ‡§ğŸ‡®': 'fr', 'ğŸ‡°ğŸ‡­': 'km',
    'ğŸ‡¨ğŸ‡²': 'en', 'ğŸ‡¨ğŸ‡¦': 'en', 'ğŸ‡¨ğŸ‡»': 'pt', 'ğŸ‡°ğŸ‡¾': 'en', 'ğŸ‡¨ğŸ‡«': 'fr', 'ğŸ‡¹ğŸ‡©': 'fr', 'ğŸ‡¨ğŸ‡±': 'es',
    'ğŸ‡¨ğŸ‡³': 'zh-cn', 'ğŸ‡¨ğŸ‡½': 'en', 'ğŸ‡¨ğŸ‡¨': 'ms', 'ğŸ‡¨ğŸ‡´': 'es', 'ğŸ‡°ğŸ‡²': 'ar', 'ğŸ‡¨ğŸ‡¬': 'fr', 'ğŸ‡¨ğŸ‡©': 'fr',
    'ğŸ‡¨ğŸ‡°': 'en', 'ğŸ‡¨ğŸ‡·': 'es', 'ğŸ‡¨ğŸ‡®': 'fr', 'ğŸ‡­ğŸ‡·': 'hr', 'ğŸ‡¨ğŸ‡º': 'es', 'ğŸ‡¨ğŸ‡¼': 'nl', 'ğŸ‡¨ğŸ‡¾': 'el',
    'ğŸ‡¨ğŸ‡¿': 'cs', 'ğŸ‡©ğŸ‡°': 'da', 'ğŸ‡©ğŸ‡¯': 'fr', 'ğŸ‡©ğŸ‡²': 'en', 'ğŸ‡©ğŸ‡´': 'es', 'ğŸ‡ªğŸ‡¨': 'es', 'ğŸ‡ªğŸ‡¬': 'ar',
    'ğŸ‡¸ğŸ‡»': 'es', 'ğŸ‡¬ğŸ‡¶': 'es', 'ğŸ‡ªğŸ‡·': 'ti', 'ğŸ‡ªğŸ‡ª': 'et', 'ğŸ‡ªğŸ‡¹': 'am', 'ğŸ‡«ğŸ‡°': 'en', 'ğŸ‡«ğŸ‡´': 'fo',
    'ğŸ‡«ğŸ‡¯': 'en', 'ğŸ‡«ğŸ‡®': 'fi', 'ğŸ‡«ğŸ‡·': 'fr', 'ğŸ‡¬ğŸ‡«': 'fr', 'ğŸ‡µğŸ‡«': 'fr', 'ğŸ‡¹ğŸ‡«': 'fr', 'ğŸ‡¬ğŸ‡¦': 'fr',
    'ğŸ‡¬ğŸ‡²': 'en', 'ğŸ‡¬ğŸ‡ª': 'ka', 'ğŸ‡©ğŸ‡ª': 'de', 'ğŸ‡¬ğŸ‡­': 'en', 'ğŸ‡¬ğŸ‡®': 'en', 'ğŸ‡¬ğŸ‡·': 'el', 'ğŸ‡¬ğŸ‡±': 'kl',
    'ğŸ‡¬ğŸ‡©': 'en', 'ğŸ‡¬ğŸ‡µ': 'fr', 'ğŸ‡¬ğŸ‡º': 'en', 'ğŸ‡¬ğŸ‡¹': 'es', 'ğŸ‡¬ğŸ‡¬': 'en', 'ğŸ‡¬ğŸ‡³': 'fr', 'ğŸ‡¬ğŸ‡¼': 'pt',
    'ğŸ‡¬ğŸ‡¾': 'en', 'ğŸ‡­ğŸ‡¹': 'ht', 'ğŸ‡­ğŸ‡³': 'es', 'ğŸ‡­ğŸ‡°': 'zh-cn', 'ğŸ‡­ğŸ‡º': 'hu', 'ğŸ‡®ğŸ‡¸': 'is', 'ğŸ‡®ğŸ‡³': 'hi',
    'ğŸ‡®ğŸ‡©': 'id', 'ğŸ‡®ğŸ‡·': 'fa', 'ğŸ‡®ğŸ‡¶': 'ar', 'ğŸ‡®ğŸ‡ª': 'ga', 'ğŸ‡®ğŸ‡²': 'en', 'ğŸ‡®ğŸ‡±': 'he', 'ğŸ‡®ğŸ‡¹': 'it',
    'ğŸ‡¯ğŸ‡²': 'en', 'ğŸ‡¯ğŸ‡µ': 'ja', 'ğŸ‡¯ğŸ‡ª': 'en', 'ğŸ‡¯ğŸ‡´': 'ar', 'ğŸ‡°ğŸ‡¿': 'kk', 'ğŸ‡°ğŸ‡ª': 'sw', 'ğŸ‡°ğŸ‡®': 'en',
    'ğŸ‡½ğŸ‡°': 'sq', 'ğŸ‡°ğŸ‡¼': 'ar', 'ğŸ‡°ğŸ‡¬': 'ky', 'ğŸ‡±ğŸ‡¦': 'lo', 'ğŸ‡±ğŸ‡»': 'lv', 'ğŸ‡±ğŸ‡§': 'ar', 'ğŸ‡±ğŸ‡¸': 'st',
    'ğŸ‡±ğŸ‡·': 'en', 'ğŸ‡±ğŸ‡¾': 'ar', 'ğŸ‡±ğŸ‡®': 'de', 'ğŸ‡±ğŸ‡¹': 'lt', 'ğŸ‡±ğŸ‡º': 'fr', 'ğŸ‡²ğŸ‡´': 'zh-cn', 'ğŸ‡²ğŸ‡°': 'mk',
    'ğŸ‡²ğŸ‡¬': 'mg', 'ğŸ‡²ğŸ‡¼': 'en', 'ğŸ‡²ğŸ‡¾': 'ms', 'ğŸ‡²ğŸ‡»': 'dv', 'ğŸ‡²ğŸ‡±': 'fr', 'ğŸ‡²ğŸ‡¹': 'mt', 'ğŸ‡²ğŸ‡­': 'en',
    'ğŸ‡²ğŸ‡¶': 'fr', 'ğŸ‡²ğŸ‡·': 'ar', 'ğŸ‡²ğŸ‡º': 'en', 'ğŸ‡¾ğŸ‡¹': 'fr', 'ğŸ‡²ğŸ‡½': 'es', 'ğŸ‡«ğŸ‡²': 'en', 'ğŸ‡²ğŸ‡©': 'ro',
    'ğŸ‡²ğŸ‡¨': 'fr', 'ğŸ‡²ğŸ‡³': 'mn', 'ğŸ‡²ğŸ‡ª': 'sr', 'ğŸ‡²ğŸ‡¸': 'en', 'ğŸ‡²ğŸ‡¦': 'ar', 'ğŸ‡²ğŸ‡¿': 'pt', 'ğŸ‡²ğŸ‡²': 'my',
    'ğŸ‡³ğŸ‡¦': 'en', 'ğŸ‡³ğŸ‡·': 'en', 'ğŸ‡³ğŸ‡µ': 'ne', 'ğŸ‡³ğŸ‡±': 'nl', 'ğŸ‡³ğŸ‡¨': 'fr', 'ğŸ‡³ğŸ‡¿': 'en', 'ğŸ‡³ğŸ‡®': 'es',
    'ğŸ‡³ğŸ‡ª': 'fr', 'ğŸ‡³ğŸ‡¬': 'en', 'ğŸ‡³ğŸ‡º': 'en', 'ğŸ‡³ğŸ‡«': 'en', 'ğŸ‡°ğŸ‡µ': 'ko', 'ğŸ‡²ğŸ‡µ': 'en', 'ğŸ‡³ğŸ‡´': 'no',
    'ğŸ‡´ğŸ‡²': 'ar', 'ğŸ‡µğŸ‡°': 'ur', 'ğŸ‡µğŸ‡¼': 'en', 'ğŸ‡µğŸ‡¸': 'ar', 'ğŸ‡µğŸ‡¦': 'es', 'ğŸ‡µğŸ‡¬': 'en', 'ğŸ‡µğŸ‡¾': 'es',
    'ğŸ‡µğŸ‡ª': 'es', 'ğŸ‡µğŸ‡­': 'tl', 'ğŸ‡µğŸ‡³': 'en', 'ğŸ‡µğŸ‡±': 'pl', 'ğŸ‡µğŸ‡¹': 'pt', 'ğŸ‡µğŸ‡·': 'es', 'ğŸ‡¶ğŸ‡¦': 'ar',
    'ğŸ‡·ğŸ‡ª': 'fr', 'ğŸ‡·ğŸ‡´': 'ro', 'ğŸ‡·ğŸ‡º': 'ru', 'ğŸ‡·ğŸ‡¼': 'rw', 'ğŸ‡¼ğŸ‡¸': 'sm', 'ğŸ‡¸ğŸ‡²': 'it', 'ğŸ‡¸ğŸ‡¹': 'pt',
    'ğŸ‡¸ğŸ‡¦': 'ar', 'ğŸ‡¸ğŸ‡³': 'fr', 'ğŸ‡·ğŸ‡¸': 'sr', 'ğŸ‡¸ğŸ‡¨': 'fr', 'ğŸ‡¸ğŸ‡±': 'en', 'ğŸ‡¸ğŸ‡¬': 'en', 'ğŸ‡¸ğŸ‡½': 'nl',
    'ğŸ‡¸ğŸ‡°': 'sk', 'ğŸ‡¸ğŸ‡®': 'sl', 'ğŸ‡¸ğŸ‡§': 'en', 'ğŸ‡¸ğŸ‡´': 'so', 'ğŸ‡¿ğŸ‡¦': 'af', 'ğŸ‡°ğŸ‡·': 'ko', 'ğŸ‡¸ğŸ‡¸': 'en',
    'ğŸ‡ªğŸ‡¸': 'es', 'ğŸ‡±ğŸ‡°': 'si', 'ğŸ‡§ğŸ‡±': 'fr', 'ğŸ‡¸ğŸ‡­': 'en', 'ğŸ‡°ğŸ‡³': 'en', 'ğŸ‡±ğŸ‡¨': 'en', 'ğŸ‡²ğŸ‡«': 'fr',
    'ğŸ‡µğŸ‡²': 'fr', 'ğŸ‡»ğŸ‡¨': 'en', 'ğŸ‡¸ğŸ‡©': 'ar', 'ğŸ‡¸ğŸ‡·': 'nl', 'ğŸ‡¸ğŸ‡¿': 'en', 'ğŸ‡¸ğŸ‡ª': 'sv', 'ğŸ‡¨ğŸ‡­': 'de',
    'ğŸ‡¸ğŸ‡¾': 'ar', 'ğŸ‡¹ğŸ‡¼': 'zh-tw', 'ğŸ‡¹ğŸ‡¯': 'tg', 'ğŸ‡¹ğŸ‡¿': 'sw', 'ğŸ‡¹ğŸ‡­': 'th', 'ğŸ‡¹ğŸ‡±': 'pt', 'ğŸ‡¹ğŸ‡¬': 'fr',
    'ğŸ‡¹ğŸ‡°': 'en', 'ğŸ‡¹ğŸ‡´': 'to', 'ğŸ‡¹ğŸ‡¹': 'en', 'ğŸ‡¹ğŸ‡³': 'ar', 'ğŸ‡¹ğŸ‡·': 'tr', 'ğŸ‡¹ğŸ‡²': 'tk', 'ğŸ‡¹ğŸ‡¨': 'en',
    'ğŸ‡¹ğŸ‡»': 'en', 'ğŸ‡ºğŸ‡¬': 'sw', 'ğŸ‡ºğŸ‡¦': 'uk', 'ğŸ‡¦ğŸ‡ª': 'ar', 'ğŸ‡¬ğŸ‡§': 'en', 'ğŸ‡ºğŸ‡¸': 'en', 'ğŸ‡ºğŸ‡¾': 'es',
    'ğŸ‡ºğŸ‡¿': 'uz', 'ğŸ‡»ğŸ‡º': 'fr', 'ğŸ‡»ğŸ‡¦': 'it', 'ğŸ‡»ğŸ‡ª': 'es', 'ğŸ‡»ğŸ‡³': 'vi', 'ğŸ‡¼ğŸ‡«': 'fr', 'ğŸ‡ªğŸ‡­': 'ar',
    'ğŸ‡¾ğŸ‡ª': 'ar', 'ğŸ‡¿ğŸ‡²': 'en', 'ğŸ‡¿ğŸ‡¼': 'en'
}

# --- Bot Initialization ---

# Define the bot's intents.
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.reactions = True

# Create the bot instance
bot = discord.Bot(intents=intents)

# Initialize the translator
translator = Translator()

# A dictionary to store auto-translation channel configurations
auto_translate_channels = {}
SETTINGS_FILE = "settings.json"

# --- Functions for Saving/Loading ---

def save_settings():
    """Saves the auto_translate_channels dictionary to a file."""
    try:
        string_keys_channels = {str(k): v for k, v in auto_translate_channels.items()}
        with open(SETTINGS_FILE, "w") as f:
            json.dump(string_keys_channels, f, indent=4)
        print("Settings saved successfully.")
    except Exception as e:
        print(f"Error saving settings: {e}")

def load_settings():
    """Loads the auto_translate_channels dictionary from a file."""
    global auto_translate_channels
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, "r") as f:
                loaded_channels = json.load(f)
                auto_translate_channels = {int(k): v for k, v in loaded_channels.items()}
                print("Settings loaded successfully.")
        else:
            print("No settings file found, starting with empty settings.")
    except Exception as e:
        print(f"Error loading settings: {e}")
        auto_translate_channels = {}

# --- Event Handlers ---

@bot.event
async def on_ready():
    """Event handler for when the bot has successfully connected to Discord."""
    load_settings()
    print(f"Bot is logged in as {bot.user}")
    print("Ready to translate!")
    print("-" * 20)


@bot.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    """Event handler for reaction-based translation."""
    if payload.user_id == bot.user.id:
        return

    emoji = str(payload.emoji)
    if emoji in FLAG_TO_LANG:
        try:
            channel = bot.get_channel(payload.channel_id)
            if not isinstance(channel, discord.TextChannel): return
            
            message = await channel.fetch_message(payload.message_id)
            
            if not message.content:
                return

            target_lang = FLAG_TO_LANG[emoji]
            translation = translator.translate(message.content, dest=target_lang)
            
            embed = discord.Embed(
                description=f"**Translated to {LANGUAGES.get(target_lang, 'Unknown').capitalize()}**\n{translation.text}",
                color=discord.Color.blue()
            )
            embed.set_footer(text=f"Original message by {message.author.display_name}")

            await message.reply(embed=embed, mention_author=False)

        except discord.errors.Forbidden:
            print(f"Error: Missing permissions to send message in channel {payload.channel_id}")
        except Exception as e:
            print(f"An error occurred during reaction translation: {e}")


@bot.event
async def on_message(message: discord.Message):
    """Event handler for auto-translation channels."""
    if message.author == bot.user:
        return

    if message.channel.id in auto_translate_channels:
        try:
            target_lang = auto_translate_channels[message.channel.id]
            
            if not message.content:
                return

            translation = translator.translate(message.content, dest=target_lang)
            
            embed = discord.Embed(
                description=f"```{translation.text}```",
                color=discord.Color.green()
            )
            author_name = message.author.display_name
            original_lang_code = translation.src
            original_lang_name = LANGUAGES.get(original_lang_code, "Unknown").capitalize()
            
            embed.set_footer(text=f"Auto-translated from {original_lang_name} for {author_name}")
            
            await message.channel.send(embed=embed)

        except Exception as e:
            print(f"An error occurred during auto-translation: {e}")


# --- Slash Commands ---

@bot.slash_command(
    name="set_channel",
    description="Set this channel for automatic translation to a specific language."
)
@discord.commands.default_permissions(manage_channels=True)
async def set_channel(ctx: discord.ApplicationContext, target_language: str):
    """Command to set up a channel for auto-translation."""
    target_language = target_language.lower().strip()

    if target_language not in LANGUAGES:
        await ctx.respond(
            f"'{target_language}' is not a valid language code. Please use a valid code (e.g., 'en', 'es', 'ja').",
            ephemeral=True
        )
        return

    auto_translate_channels[ctx.channel.id] = target_language
    save_settings()

    lang_name = LANGUAGES.get(target_language, "this language").capitalize()
    await ctx.respond(f"âœ… This channel will now automatically translate all messages to **{lang_name}**.")


@bot.slash_command(
    name="remove_channel",
    description="Remove this channel from automatic translation."
)
@discord.commands.default_permissions(manage_channels=True)
async def remove_channel(ctx: discord.ApplicationContext):
    """Command to remove a channel from auto-translation."""
    if ctx.channel.id in auto_translate_channels:
        del auto_translate_channels[ctx.channel.id]
        save_settings()
        await ctx.respond("âœ… Automatic translation has been disabled for this channel.")
    else:
        await ctx.respond("This channel is not configured for automatic translation.", ephemeral=True)

# --- Web Server to Keep Bot Alive on Render (NEW CODE) ---
app = Flask('')

@app.route('/')
def home():
    return "I'm alive"

def run():
  app.run(host='0.0.0.0',port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# --- Bot Execution (MODIFIED) ---
if __name__ == "__main__":
    if BOT_TOKEN is None:
        print("Error: BOT_TOKEN not found in .env file.")
    else:
        keep_alive()  # Starts the web server
        bot.run(BOT_TOKEN)
ï¿½
